{"ast":null,"code":"module.exports = authenticate;\n\nconst {\n  Deprecation\n} = require(\"deprecation\");\n\nconst once = require(\"once\");\n\nconst deprecateAuthenticate = once((log, deprecation) => log.warn(deprecation));\n\nfunction authenticate(state, options) {\n  deprecateAuthenticate(state.octokit.log, new Deprecation('[@octokit/rest] octokit.authenticate() is deprecated. Use \"auth\" constructor option instead.'));\n\n  if (!options) {\n    state.auth = false;\n    return;\n  }\n\n  switch (options.type) {\n    case \"basic\":\n      if (!options.username || !options.password) {\n        throw new Error(\"Basic authentication requires both a username and password to be set\");\n      }\n\n      break;\n\n    case \"oauth\":\n      if (!options.token && !(options.key && options.secret)) {\n        throw new Error(\"OAuth2 authentication requires a token or key & secret to be set\");\n      }\n\n      break;\n\n    case \"token\":\n    case \"app\":\n      if (!options.token) {\n        throw new Error(\"Token authentication requires a token to be set\");\n      }\n\n      break;\n\n    default:\n      throw new Error(\"Invalid authentication type, must be 'basic', 'oauth', 'token' or 'app'\");\n  }\n\n  state.auth = options;\n}","map":null,"metadata":{},"sourceType":"script"}