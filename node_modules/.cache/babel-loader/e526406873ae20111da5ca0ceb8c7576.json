{"ast":null,"code":"module.exports = parseOptions;\n\nconst {\n  Deprecation\n} = require(\"deprecation\");\n\nconst {\n  getUserAgent\n} = require(\"universal-user-agent\");\n\nconst once = require(\"once\");\n\nconst pkg = require(\"../package.json\");\n\nconst deprecateOptionsTimeout = once((log, deprecation) => log.warn(deprecation));\nconst deprecateOptionsAgent = once((log, deprecation) => log.warn(deprecation));\nconst deprecateOptionsHeaders = once((log, deprecation) => log.warn(deprecation));\n\nfunction parseOptions(options, log, hook) {\n  if (options.headers) {\n    options.headers = Object.keys(options.headers).reduce((newObj, key) => {\n      newObj[key.toLowerCase()] = options.headers[key];\n      return newObj;\n    }, {});\n  }\n\n  const clientDefaults = {\n    headers: options.headers || {},\n    request: options.request || {},\n    mediaType: {\n      previews: [],\n      format: \"\"\n    }\n  };\n\n  if (options.baseUrl) {\n    clientDefaults.baseUrl = options.baseUrl;\n  }\n\n  if (options.userAgent) {\n    clientDefaults.headers[\"user-agent\"] = options.userAgent;\n  }\n\n  if (options.previews) {\n    clientDefaults.mediaType.previews = options.previews;\n  }\n\n  if (options.timeZone) {\n    clientDefaults.headers[\"time-zone\"] = options.timeZone;\n  }\n\n  if (options.timeout) {\n    deprecateOptionsTimeout(log, new Deprecation(\"[@octokit/rest] new Octokit({timeout}) is deprecated. Use {request: {timeout}} instead. See https://github.com/octokit/request.js#request\"));\n    clientDefaults.request.timeout = options.timeout;\n  }\n\n  if (options.agent) {\n    deprecateOptionsAgent(log, new Deprecation(\"[@octokit/rest] new Octokit({agent}) is deprecated. Use {request: {agent}} instead. See https://github.com/octokit/request.js#request\"));\n    clientDefaults.request.agent = options.agent;\n  }\n\n  if (options.headers) {\n    deprecateOptionsHeaders(log, new Deprecation(\"[@octokit/rest] new Octokit({headers}) is deprecated. Use {userAgent, previews} instead. See https://github.com/octokit/request.js#request\"));\n  }\n\n  const userAgentOption = clientDefaults.headers[\"user-agent\"];\n  const defaultUserAgent = `octokit.js/${pkg.version} ${getUserAgent()}`;\n  clientDefaults.headers[\"user-agent\"] = [userAgentOption, defaultUserAgent].filter(Boolean).join(\" \");\n  clientDefaults.request.hook = hook.bind(null, \"request\");\n  return clientDefaults;\n}","map":null,"metadata":{},"sourceType":"script"}